import java.util.Stack;

public class Solution {
    public boolean isValid(String s) {
        // Create a stack to keep track of the open brackets
        Stack<Character> stack = new Stack<>();

        // Iterate over each character in the string
        for (char c : s.toCharArray()) {
            // If it's an opening bracket, push it onto the stack
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            }
            // If it's a closing bracket, check if it matches the top of the stack
            else {
                if (stack.isEmpty()) {
                    return false; // Stack is empty, so no matching opening bracket
                }
                char top = stack.pop();
                if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {
                    return false; // Mismatched pair
                }
            }
        }

        // If the stack is empty, all opening brackets were matched correctly
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example test cases
        System.out.println(solution.isValid("()")); // true
        System.out.println(solution.isValid("()[]{}")); // true
        System.out.println(solution.isValid("(]")); // false
        System.out.println(solution.isValid("([])")); // true
        System.out.println(solution.isValid("([)]")); // false
    }
}
