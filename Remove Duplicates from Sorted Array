public class Solution {
    public int removeDuplicates(int[] nums) {
        // Edge case: if the array has 0 or 1 elements, there are no duplicates
        if (nums.length == 0) {
            return 0;
        }

        int i = 0; // Slow pointer for unique elements

        // Iterate through the array with fast pointer j
        for (int j = 1; j < nums.length; j++) {
            // If nums[j] is different from nums[i], it's a new unique element
            if (nums[j] != nums[i]) {
                i++; // Move the slow pointer
                nums[i] = nums[j]; // Update the position with the new unique element
            }
        }

        // Return the count of unique elements (i + 1)
        return i + 1;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test example 1
        int[] nums1 = {1, 1, 2};
        int k1 = solution.removeDuplicates(nums1);
        System.out.println("k = " + k1); // Expected output: 2
        for (int i = 0; i < k1; i++) {
            System.out.print(nums1[i] + " "); // Expected output: 1 2
        }
        System.out.println();

        // Test example 2
        int[] nums2 = {0, 0, 1, 1, 1, 2, 2, 3, 3, 4};
        int k2 = solution.removeDuplicates(nums2);
        System.out.println("k = " + k2); // Expected output: 5
        for (int i = 0; i < k2; i++) {
            System.out.print(nums2[i] + " "); // Expected output: 0 1 2 3 4
        }
    }
}

